mkdir -p results/nangate45/gcd/gcd_run_3_5_1/
echo .41 > results/nangate45/gcd/gcd_run_3_5_1/clock_period.txt
mkdir -p ./results/nangate45/gcd/gcd_run_3_5_1 ./logs/nangate45/gcd/gcd_run_3_5_1 ./reports/nangate45/gcd/gcd_run_3_5_1 ./objects/nangate45/gcd/gcd_run_3_5_1
(env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /opt/oss-cad-suite/bin/yosys -v 3 -c /work/CSE291/project/CSE291_PROJECT/scripts/synth_canonicalize.tcl) 2>&1 | tee /work/CSE291/project/CSE291_PROJECT/logs/nangate45/gcd/gcd_run_3_5_1/1_1_yosys_canonicalize.log
1. Executing Verilog-2005 frontend: /work/CSE291/project/CSE291_PROJECT/designs/src/gcd/gcd.v
2. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_3_5_1/lib/NangateOpenCellLibrary_typical.lib
3. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_3_5_1/lib/NangateOpenCellLibrary_typical.lib
4. Executing Verilog-2005 frontend: /work/CSE291/project/CSE291_PROJECT/platforms/nangate45/cells_clkgate.v
Using ABC area script.
Extracting clock period from SDC file: ./results/nangate45/gcd/gcd_run_3_5_1/clock_period.txt
Setting clock period to .41
5. Executing HIERARCHY pass (managing design hierarchy).
6. Executing AST frontend in derive mode using pre-parsed AST for module `\gcd'.
6.1. Analyzing design hierarchy..
6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\GcdUnitDpathRTL_0x4d0fc71ead8d3d9e'.
6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\GcdUnitCtrlRTL_0x4d0fc71ead8d3d9e'.
6.4. Analyzing design hierarchy..
6.5. Executing AST frontend in derive mode using pre-parsed AST for module `\RegRst_0x9f365fdf6c8998a'.
6.6. Executing AST frontend in derive mode using pre-parsed AST for module `\RegEn_0x68db79c4ec1d6e5b'.
6.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Subtractor_0x422b1f52edd46a85'.
6.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux_0xdd6473406d1a99a'.
6.9. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux_0x683fa1a418b072c9'.
6.10. Executing AST frontend in derive mode using pre-parsed AST for module `\ZeroComparator_0x422b1f52edd46a85'.
6.11. Executing AST frontend in derive mode using pre-parsed AST for module `\LtComparator_0x422b1f52edd46a85'.
6.12. Analyzing design hierarchy..
6.13. Analyzing design hierarchy..
7. Executing OPT_CLEAN pass (remove unused cells and wires).
Warning: Ignoring module ZeroComparator_0x422b1f52edd46a85 because it contains processes (run 'proc' command first).
Warning: Ignoring module Mux_0x683fa1a418b072c9 because it contains processes (run 'proc' command first).
Warning: Ignoring module Mux_0xdd6473406d1a99a because it contains processes (run 'proc' command first).
Warning: Ignoring module Subtractor_0x422b1f52edd46a85 because it contains processes (run 'proc' command first).
Warning: Ignoring module RegEn_0x68db79c4ec1d6e5b because it contains processes (run 'proc' command first).
Warning: Ignoring module RegRst_0x9f365fdf6c8998a because it contains processes (run 'proc' command first).
Warning: Ignoring module GcdUnitCtrlRTL_0x4d0fc71ead8d3d9e because it contains processes (run 'proc' command first).
Warning: Ignoring module LtComparator_0x422b1f52edd46a85 because it contains processes (run 'proc' command first).
8. Executing RTLIL backend.
Warnings: 8 unique messages, 8 total
End of script. Logfile hash: fc51f94c37, CPU: user 0.34s system 0.00s, MEM: 30.85 MB peak
Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)
Time spent: 90% 4x read_liberty (0 sec), 3% 4x read_verilog (0 sec), ...
Elapsed time: 0:00.46[h:]min:sec. CPU time: user 0.44 sys 0.00 (97%). Peak memory: 34012KB.
mkdir -p ./results/nangate45/gcd/gcd_run_3_5_1 ./logs/nangate45/gcd/gcd_run_3_5_1 ./reports/nangate45/gcd/gcd_run_3_5_1 ./objects/nangate45/gcd/gcd_run_3_5_1
(env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /opt/oss-cad-suite/bin/yosys -v 3 -c /work/CSE291/project/CSE291_PROJECT/scripts/synth.tcl) 2>&1 | tee /work/CSE291/project/CSE291_PROJECT/logs/nangate45/gcd/gcd_run_3_5_1/1_1_yosys.log
1. Executing RTLIL frontend.
2. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_3_5_1/lib/NangateOpenCellLibrary_typical.lib
3. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_3_5_1/lib/NangateOpenCellLibrary_typical.lib
4. Executing Verilog-2005 frontend: /work/CSE291/project/CSE291_PROJECT/platforms/nangate45/cells_clkgate.v
Using ABC area script.
Extracting clock period from SDC file: ./results/nangate45/gcd/gcd_run_3_5_1/clock_period.txt
Setting clock period to .41
5. Executing HIERARCHY pass (managing design hierarchy).
5.1. Analyzing design hierarchy..
5.2. Analyzing design hierarchy..
6. Executing SYNTH pass.
6.1. Executing HIERARCHY pass (managing design hierarchy).
6.1.1. Analyzing design hierarchy..
6.1.2. Analyzing design hierarchy..
6.2. Executing PROC pass (convert processes to netlists).
6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
6.2.4. Executing PROC_INIT pass (extract init attributes).
6.2.5. Executing PROC_ARST pass (detect async resets in processes).
6.2.6. Executing PROC_ROM pass (convert switches to ROMs).
6.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
6.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
6.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
6.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
6.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
6.2.12. Executing OPT_EXPR pass (perform const folding).
6.3. Executing FLATTEN pass (flatten design).
6.4. Executing OPT_EXPR pass (perform const folding).
6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
6.6. Executing CHECK pass (checking for obvious problems).
6.7. Executing OPT pass (performing simple optimizations).
6.7.1. Executing OPT_EXPR pass (perform const folding).
6.7.2. Executing OPT_MERGE pass (detect identical cells).
6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.7.5. Executing OPT_MERGE pass (detect identical cells).
6.7.6. Executing OPT_DFF pass (perform DFF optimizations).
6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.7.8. Executing OPT_EXPR pass (perform const folding).
6.7.9. Rerunning OPT passes. (Maybe there is more to do..)
6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.7.12. Executing OPT_MERGE pass (detect identical cells).
6.7.13. Executing OPT_DFF pass (perform DFF optimizations).
6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.7.15. Executing OPT_EXPR pass (perform const folding).
6.7.16. Finished OPT passes. (There is nothing left to do.)
6.8. Executing FSM pass (extract and optimize FSM).
6.8.1. Executing FSM_DETECT pass (finding FSMs in design).
6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
6.9. Executing OPT pass (performing simple optimizations).
6.9.1. Executing OPT_EXPR pass (perform const folding).
6.9.2. Executing OPT_MERGE pass (detect identical cells).
6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.9.5. Executing OPT_MERGE pass (detect identical cells).
6.9.6. Executing OPT_DFF pass (perform DFF optimizations).
6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.9.8. Executing OPT_EXPR pass (perform const folding).
6.9.9. Rerunning OPT passes. (Maybe there is more to do..)
6.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.9.12. Executing OPT_MERGE pass (detect identical cells).
6.9.13. Executing OPT_DFF pass (perform DFF optimizations).
6.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.9.15. Executing OPT_EXPR pass (perform const folding).
6.9.16. Finished OPT passes. (There is nothing left to do.)
6.10. Executing WREDUCE pass (reducing word size of cells).
6.11. Executing PEEPOPT pass (run peephole optimizers).
6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
6.13. Executing ALUMACC pass (create $alu and $macc cells).
6.14. Executing SHARE pass (SAT-based resource sharing).
6.15. Executing OPT pass (performing simple optimizations).
6.15.1. Executing OPT_EXPR pass (perform const folding).
6.15.2. Executing OPT_MERGE pass (detect identical cells).
6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.15.5. Executing OPT_MERGE pass (detect identical cells).
6.15.6. Executing OPT_DFF pass (perform DFF optimizations).
6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15.8. Executing OPT_EXPR pass (perform const folding).
6.15.9. Rerunning OPT passes. (Maybe there is more to do..)
6.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.15.12. Executing OPT_MERGE pass (detect identical cells).
6.15.13. Executing OPT_DFF pass (perform DFF optimizations).
6.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15.15. Executing OPT_EXPR pass (perform const folding).
6.15.16. Finished OPT passes. (There is nothing left to do.)
6.16. Executing MEMORY pass.
6.16.1. Executing OPT_MEM pass (optimize memories).
6.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
6.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
6.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
6.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
6.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
6.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
6.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
6.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
6.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).
6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
7. Executing SYNTH pass.
7.1. Executing OPT pass (performing simple optimizations).
7.1.1. Executing OPT_EXPR pass (perform const folding).
7.1.2. Executing OPT_MERGE pass (detect identical cells).
7.1.3. Executing OPT_DFF pass (perform DFF optimizations).
7.1.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.1.5. Finished fast OPT passes.
7.2. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
7.3. Executing OPT pass (performing simple optimizations).
7.3.1. Executing OPT_EXPR pass (perform const folding).
7.3.2. Executing OPT_MERGE pass (detect identical cells).
7.3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
7.3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
7.3.5. Executing OPT_MERGE pass (detect identical cells).
7.3.6. Executing OPT_SHARE pass.
7.3.7. Executing OPT_DFF pass (perform DFF optimizations).
7.3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
7.3.9. Executing OPT_EXPR pass (perform const folding).
7.3.10. Finished OPT passes. (There is nothing left to do.)
7.4. Executing TECHMAP pass (map to technology primitives).
7.4.1. Executing Verilog-2005 frontend: /opt/oss-cad-suite/lib/../share/yosys/techmap.v
7.4.2. Executing Verilog-2005 frontend: /work/CSE291/project/CSE291_PROJECT/platforms/common/lcu_kogge_stone.v
7.4.3. Continuing TECHMAP pass.
7.5. Executing OPT pass (performing simple optimizations).
7.5.1. Executing OPT_EXPR pass (perform const folding).
7.5.2. Executing OPT_MERGE pass (detect identical cells).
7.5.3. Executing OPT_DFF pass (perform DFF optimizations).
7.5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.5.5. Finished fast OPT passes.
7.6. Executing ABC pass (technology mapping using ABC).
7.6.1. Extracting gate netlist of module `\gcd' to `<abc-temp-dir>/input.blif'..
7.7. Executing OPT pass (performing simple optimizations).
7.7.1. Executing OPT_EXPR pass (perform const folding).
7.7.2. Executing OPT_MERGE pass (detect identical cells).
7.7.3. Executing OPT_DFF pass (perform DFF optimizations).
7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.7.5. Finished fast OPT passes.
7.8. Executing HIERARCHY pass (managing design hierarchy).
7.8.1. Analyzing design hierarchy..
7.8.2. Analyzing design hierarchy..
7.9. Printing statistics.
7.10. Executing CHECK pass (checking for obvious problems).
8. Executing OPT pass (performing simple optimizations).
8.1. Executing OPT_EXPR pass (perform const folding).
8.2. Executing OPT_MERGE pass (detect identical cells).
8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
8.5. Executing OPT_MERGE pass (detect identical cells).
8.6. Executing OPT_DFF pass (perform DFF optimizations).
8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
8.8. Executing OPT_EXPR pass (perform const folding).
8.9. Rerunning OPT passes. (Maybe there is more to do..)
8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
8.12. Executing OPT_MERGE pass (detect identical cells).
8.13. Executing OPT_DFF pass (perform DFF optimizations).
8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
8.15. Executing OPT_EXPR pass (perform const folding).
8.16. Finished OPT passes. (There is nothing left to do.)
9. Executing TECHMAP pass (map to technology primitives).
9.1. Executing Verilog-2005 frontend: /work/CSE291/project/CSE291_PROJECT/platforms/nangate45/cells_latch.v
9.2. Continuing TECHMAP pass.
10. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
10.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
11. Executing OPT pass (performing simple optimizations).
11.1. Executing OPT_EXPR pass (perform const folding).
11.2. Executing OPT_MERGE pass (detect identical cells).
11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.5. Executing OPT_MERGE pass (detect identical cells).
11.6. Executing OPT_DFF pass (perform DFF optimizations).
11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
11.8. Executing OPT_EXPR pass (perform const folding).
11.9. Rerunning OPT passes. (Maybe there is more to do..)
11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.12. Executing OPT_MERGE pass (detect identical cells).
11.13. Executing OPT_DFF pass (perform DFF optimizations).
11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.15. Executing OPT_EXPR pass (perform const folding).
11.16. Finished OPT passes. (There is nothing left to do.)
abc -script /work/CSE291/project/CSE291_PROJECT/scripts/abc_area.script -liberty ./objects/nangate45/gcd/gcd_run_3_5_1/lib/NangateOpenCellLibrary_typical.lib -constr ./objects/nangate45/gcd/gcd_run_3_5_1/abc.constr -dont_use TAPCELL_X1 -dont_use FILLCELL_X1 -dont_use AOI211_X1 -dont_use OAI211_X1 -D 0.41
12. Executing ABC pass (technology mapping using ABC).
12.1. Extracting gate netlist of module `\gcd' to `<abc-temp-dir>/input.blif'..
12.1.1. Executing ABC.
12.1.2. Re-integrating ABC results.
13. Executing SETUNDEF pass (replace undef values with defined constants).
14. Executing SPLITNETS pass (splitting up multi-bit signals).
15. Executing OPT_CLEAN pass (remove unused cells and wires).
16. Executing HILOMAP pass (mapping to constant drivers).
17. Executing INSBUF pass (insert buffer cells for connected wires).
18. Executing CHECK pass (checking for obvious problems).
19. Printing statistics.
20. Executing CHECK pass (checking for obvious problems).
21. Executing Verilog backend.
21.1. Executing BMUXMAP pass.
21.2. Executing DEMUXMAP pass.
exec cp /work/CSE291/project/CSE291_PROJECT/designs/nangate45/gcd/constraint.sdc ./results/nangate45/gcd/gcd_run_3_5_1/1_synth.sdc
End of script. Logfile hash: 2e71b23bcc, CPU: user 0.85s system 0.09s, MEM: 37.35 MB peak
Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)
Time spent: 25% 2x abc (0 sec), 23% 4x read_liberty (0 sec), ...
Elapsed time: 0:01.40[h:]min:sec. CPU time: user 1.27 sys 0.12 (99%). Peak memory: 38856KB.
mkdir -p ./results/nangate45/gcd/gcd_run_3_5_1 ./logs/nangate45/gcd/gcd_run_3_5_1 ./reports/nangate45/gcd/gcd_run_3_5_1
cp ./results/nangate45/gcd/gcd_run_3_5_1/1_1_yosys.v ./results/nangate45/gcd/gcd_run_3_5_1/1_synth.v
Running floorplan.tcl, stage 2_1_floorplan
[INFO ODB-0227] LEF file: /work/CSE291/project/CSE291_PROJECT/platforms/nangate45/lef/NangateOpenCellLibrary.tech.lef, created 22 layers, 27 vias
[INFO ODB-0227] LEF file: /work/CSE291/project/CSE291_PROJECT/platforms/nangate45/lef/NangateOpenCellLibrary.macro.mod.lef, created 135 library cells

==========================================================================
Floorplan check_setup
--------------------------------------------------------------------------
number instances in verilog is 503
[WARNING IFP-0028] Core area lower left (1.000, 1.000) snapped to (1.140, 1.400).
[INFO IFP-0001] Added 18 rows of 193 site FreePDK45_38x28_10R_NP_162NW_34O.
repair_timing -verbose -setup_margin 0 -repair_tns 100
[WARNING RSZ-0021] no estimated parasitics. Using wire load models.
[INFO RSZ-0098] No setup violations found
[INFO RSZ-0033] No hold violations found.
Default units for flow
 time 1ns
 capacitance 1fF
 resistance 1kohm
 voltage 1v
 current 1mA
 power 1nW
 distance 1um
Report metrics stage 2, floorplan final...

==========================================================================
floorplan final report_design_area
--------------------------------------------------------------------------
Design area 650 u^2 70% utilization.
Elapsed time: 0:00.48[h:]min:sec. CPU time: user 0.44 sys 0.03 (99%). Peak memory: 123608KB.
Running macro_place.tcl, stage 2_2_floorplan_macro
No macros found: Skipping macro_placement
Elapsed time: 0:00.42[h:]min:sec. CPU time: user 0.39 sys 0.03 (101%). Peak memory: 116384KB.
Running tapcell.tcl, stage 2_3_floorplan_tapcell
[INFO TAP-0004] Inserted 36 endcaps.
[INFO TAP-0005] Inserted 0 tapcells.
Elapsed time: 0:00.39[h:]min:sec. CPU time: user 0.36 sys 0.02 (99%). Peak memory: 118272KB.
Running pdn.tcl, stage 2_4_floorplan_pdn
[INFO PDN-0001] Inserting grid: grid
Elapsed time: 0:00.42[h:]min:sec. CPU time: user 0.34 sys 0.08 (100%). Peak memory: 122052KB.
cp ./results/nangate45/gcd/gcd_run_3_5_1/2_4_floorplan_pdn.odb ./results/nangate45/gcd/gcd_run_3_5_1/2_floorplan.odb
cp ./results/nangate45/gcd/gcd_run_3_5_1/2_1_floorplan.sdc ./results/nangate45/gcd/gcd_run_3_5_1/2_floorplan.sdc
Running global_place_skip_io.tcl, stage 3_1_place_gp_skip_io
FLOORPLAN_DEF is set. Skipping global placement without IOs
Elapsed time: 0:00.37[h:]min:sec. CPU time: user 0.32 sys 0.04 (99%). Peak memory: 118232KB.
Running io_placement.tcl, stage 3_2_place_iop
place_pins -hor_layers metal5 -ver_layers metal6
Found 0 macro blocks.
Using 2 tracks default min distance between IO pins.
[INFO PPL-0001] Number of available slots 224
[INFO PPL-0002] Number of I/O             54
[INFO PPL-0003] Number of I/O w/sink      54
[INFO PPL-0004] Number of I/O w/o sink    0
[INFO PPL-0005] Slots per section         200
[INFO PPL-0008] Successfully assigned pins to sections.
[INFO PPL-0012] I/O nets HPWL: 1160.73 um.
Elapsed time: 0:00.39[h:]min:sec. CPU time: user 0.34 sys 0.05 (98%). Peak memory: 119944KB.
Running global_place.tcl, stage 3_3_place_gp
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: (  1.140  1.400 ) ( 37.810 26.600 ) um
[INFO GPL-0006] NumInstances:               539
[INFO GPL-0007] NumPlaceInstances:          503
[INFO GPL-0008] NumFixedInstances:           36
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    574
[INFO GPL-0011] NumPins:                   1626
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 38.955 27.870 ) um
[INFO GPL-0013] CoreBBox: (  1.140  1.400 ) ( 37.810 26.600 ) um
[INFO GPL-0016] CoreArea:               924.084 um^2
[INFO GPL-0017] NonPlaceInstsArea:        9.576 um^2
[INFO GPL-0018] PlaceInstsArea:         650.104 um^2
[INFO GPL-0019] Util:                    71.088 %
[INFO GPL-0020] StdInstsArea:           650.104 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[INFO GPL-0031] FillerInit:NumGCells:       733
[INFO GPL-0032] FillerInit:NumGNets:        574
[INFO GPL-0033] FillerInit:NumGPins:       1626
[INFO GPL-0023] TargetDensity:            1.000
[INFO GPL-0024] AvrgPlaceInstArea:        1.292 um^2
[INFO GPL-0025] IdealBinArea:             1.292 um^2
[INFO GPL-0026] IdealBinCnt:                714
[INFO GPL-0027] TotalBinArea:           924.084 um^2
[INFO GPL-0028] BinCnt:        16     16
[INFO GPL-0029] BinSize: (  2.292  1.575 )
[INFO GPL-0030] NumBins: 256
Placement density is 0.7787026977539062, computed from PLACE_DENSITY_LB_ADDON 0.20 and lower bound 0.7108783721923828
global_placement -density 0.7787026977539062 -pad_left 0 -pad_right 0
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: (  1.140  1.400 ) ( 37.810 26.600 ) um
[INFO GPL-0006] NumInstances:               539
[INFO GPL-0007] NumPlaceInstances:          503
[INFO GPL-0008] NumFixedInstances:           36
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    574
[INFO GPL-0011] NumPins:                   1626
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 38.955 27.870 ) um
[INFO GPL-0013] CoreBBox: (  1.140  1.400 ) ( 37.810 26.600 ) um
[INFO GPL-0016] CoreArea:               924.084 um^2
[INFO GPL-0017] NonPlaceInstsArea:        9.576 um^2
[INFO GPL-0018] PlaceInstsArea:         650.104 um^2
[INFO GPL-0019] Util:                    71.088 %
[INFO GPL-0020] StdInstsArea:           650.104 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[InitialPlace]  Iter: 1 CG residual: 0.00000011 HPWL: 8046640
[InitialPlace]  Iter: 2 CG residual: 0.00000007 HPWL: 4089289
[InitialPlace]  Iter: 3 CG residual: 0.00000006 HPWL: 4086414
[InitialPlace]  Iter: 4 CG residual: 0.00000011 HPWL: 4096664
[InitialPlace]  Iter: 5 CG residual: 0.00000012 HPWL: 4095299
[INFO GPL-0031] FillerInit:NumGCells:       557
[INFO GPL-0032] FillerInit:NumGNets:        574
[INFO GPL-0033] FillerInit:NumGPins:       1626
[INFO GPL-0023] TargetDensity:            0.779
[INFO GPL-0024] AvrgPlaceInstArea:        1.292 um^2
[INFO GPL-0025] IdealBinArea:             1.660 um^2
[INFO GPL-0026] IdealBinCnt:                556
[INFO GPL-0027] TotalBinArea:           924.084 um^2
[INFO GPL-0028] BinCnt:        16     16
[INFO GPL-0029] BinSize: (  2.292  1.575 )
[INFO GPL-0030] NumBins: 256
[NesterovSolve] Iter:    1 overflow: 0.963 HPWL: 1765078
[NesterovSolve] Iter:   10 overflow: 0.945 HPWL: 1968196
[NesterovSolve] Iter:   20 overflow: 0.946 HPWL: 1964129
[NesterovSolve] Iter:   30 overflow: 0.946 HPWL: 1961733
[NesterovSolve] Iter:   40 overflow: 0.946 HPWL: 1960702
[NesterovSolve] Iter:   50 overflow: 0.946 HPWL: 1961661
[NesterovSolve] Iter:   60 overflow: 0.946 HPWL: 1961660
[NesterovSolve] Iter:   70 overflow: 0.946 HPWL: 1961585
[NesterovSolve] Iter:   80 overflow: 0.946 HPWL: 1962626
[NesterovSolve] Iter:   90 overflow: 0.946 HPWL: 1963875
[NesterovSolve] Iter:  100 overflow: 0.946 HPWL: 1966359
[NesterovSolve] Iter:  110 overflow: 0.946 HPWL: 1972349
[NesterovSolve] Iter:  120 overflow: 0.945 HPWL: 1988121
[NesterovSolve] Iter:  130 overflow: 0.945 HPWL: 2019398
[NesterovSolve] Iter:  140 overflow: 0.944 HPWL: 2073149
[NesterovSolve] Iter:  150 overflow: 0.939 HPWL: 2160457
[NesterovSolve] Iter:  160 overflow: 0.927 HPWL: 2276976
[NesterovSolve] Iter:  170 overflow: 0.918 HPWL: 2426700
[NesterovSolve] Iter:  180 overflow: 0.897 HPWL: 2646490
[NesterovSolve] Iter:  190 overflow: 0.874 HPWL: 2917269
[NesterovSolve] Iter:  200 overflow: 0.847 HPWL: 3201014
[NesterovSolve] Iter:  210 overflow: 0.816 HPWL: 3468679
[NesterovSolve] Iter:  220 overflow: 0.779 HPWL: 3758000
[NesterovSolve] Iter:  230 overflow: 0.741 HPWL: 4070913
[NesterovSolve] Iter:  240 overflow: 0.702 HPWL: 4371752
[NesterovSolve] Iter:  250 overflow: 0.661 HPWL: 4661313
[NesterovSolve] Iter:  260 overflow: 0.620 HPWL: 4947546
[NesterovSolve] Iter:  270 overflow: 0.573 HPWL: 5209231
[NesterovSolve] Iter:  280 overflow: 0.523 HPWL: 5430163
[NesterovSolve] Iter:  290 overflow: 0.467 HPWL: 5635352
[NesterovSolve] Iter:  300 overflow: 0.409 HPWL: 5752004
[NesterovSolve] Iter:  310 overflow: 0.349 HPWL: 5882631
[NesterovSolve] Iter:  320 overflow: 0.295 HPWL: 5901361
[NesterovSolve] Iter:  330 overflow: 0.258 HPWL: 5958886
[NesterovSolve] Iter:  340 overflow: 0.223 HPWL: 6027041
[NesterovSolve] Iter:  350 overflow: 0.191 HPWL: 6070677
[NesterovSolve] Iter:  360 overflow: 0.171 HPWL: 6139182
[NesterovSolve] Iter:  370 overflow: 0.144 HPWL: 6170461
[NesterovSolve] Iter:  380 overflow: 0.135 HPWL: 6207162
[NesterovSolve] Iter:  390 overflow: 0.113 HPWL: 6242880
[NesterovSolve] Finished with Overflow: 0.098915
Report metrics stage 3, global place...

==========================================================================
global place report_design_area
--------------------------------------------------------------------------
Design area 650 u^2 70% utilization.
Elapsed time: 0:01.04[h:]min:sec. CPU time: user 8.73 sys 0.56 (891%). Peak memory: 123036KB.
Running detail_place.tcl, stage 3_5_place_dp
Placement Analysis
---------------------------------
total displacement        545.5 u
average displacement        1.0 u
max displacement            3.7 u
original HPWL            3129.7 u
legalized HPWL           3616.6 u
delta HPWL                   16 %

Detailed placement improvement.
Importing netlist into detailed improver.
[INFO DPO-0100] Creating network with 539 cells, 54 terminals, 574 edges, 1626 pins, and 0 blockages.
[INFO DPO-0109] Network stats: inst 593, edges 574, pins 1626
[INFO DPO-0110] Number of regions is 1
[INFO DPO-0401] Setting random seed to 1.
[INFO DPO-0402] Setting maximum displacement 5 1 to 14000 2800 units.
[INFO DPO-0320] Collected 90 fixed cells.
[INFO DPO-0318] Collected 503 single height cells.
[INFO DPO-0321] Collected 0 wide cells.
[INFO DPO-0322] Image (2280, 2800) - (75620, 53200)
[INFO DPO-0310] Assigned 503 cells into segments.  Movement in X-direction is 0.000000, movement in Y-direction is 0.000000.
[INFO DPO-0313] Found 0 cells in wrong regions.
[INFO DPO-0315] Found 0 row alignment problems.
[INFO DPO-0314] Found 0 site alignment problems.
[INFO DPO-0311] Found 0 overlaps between adjacent cells.
[INFO DPO-0312] Found 0 edge spacing violations and 0 padding violations.
[INFO DPO-0303] Running algorithm for independent set matching.
[INFO DPO-0300] Set matching objective is wirelength.
[INFO DPO-0301] Pass   1 of matching; objective is 7.374920e+06.
[INFO DPO-0302] End of matching; objective is 7.338925e+06, improvement is 0.49 percent.
[INFO DPO-0303] Running algorithm for global swaps.
[INFO DPO-0306] Pass   1 of global swaps; hpwl is 7.131155e+06.
[INFO DPO-0306] Pass   2 of global swaps; hpwl is 7.103375e+06.
[INFO DPO-0307] End of global swaps; objective is 7.103375e+06, improvement is 3.21 percent.
[INFO DPO-0303] Running algorithm for vertical swaps.
[INFO DPO-0308] Pass   1 of vertical swaps; hpwl is 7.084880e+06.
[INFO DPO-0309] End of vertical swaps; objective is 7.084880e+06, improvement is 0.26 percent.
[INFO DPO-0303] Running algorithm for reordering.
[INFO DPO-0304] Pass   1 of reordering; objective is 7.027920e+06.
[INFO DPO-0305] End of reordering; objective is 7.027920e+06, improvement is 0.80 percent.
[INFO DPO-0303] Running algorithm for random improvement.
[INFO DPO-0324] Random improver is using displacement generator.
[INFO DPO-0325] Random improver is using hpwl objective.
[INFO DPO-0326] Random improver cost string is (a).
[INFO DPO-0332] End of pass, Generator displacement called 10060 times.
[INFO DPO-0335] Generator displacement, Cumulative attempts 10060, swaps 2388, moves  1900 since last reset.
[INFO DPO-0333] End of pass, Objective hpwl, Initial cost 7.027920e+06, Scratch cost 6.969270e+06, Incremental cost 6.969270e+06, Mismatch? N
[INFO DPO-0338] End of pass, Total cost is 6.969270e+06.
[INFO DPO-0327] Pass   1 of random improver; improvement in cost is 0.83 percent.
[INFO DPO-0328] End of random improver; improvement is 0.834529 percent.
[INFO DPO-0380] Cell flipping.
[INFO DPO-0382] Changed 251 cell orientations for row compatibility.
[INFO DPO-0383] Performed 193 cell flips.
[INFO DPO-0384] End of flipping; objective is 6.805220e+06, improvement is 2.35 percent.
[INFO DPO-0313] Found 0 cells in wrong regions.
[INFO DPO-0315] Found 0 row alignment problems.
[INFO DPO-0314] Found 0 site alignment problems.
[INFO DPO-0311] Found 0 overlaps between adjacent cells.
[INFO DPO-0312] Found 0 edge spacing violations and 0 padding violations.
Detailed Improvement Results
------------------------------------------
Original HPWL             3616.6 u
Final HPWL                3349.1 u
Delta HPWL                  -7.4 %

[INFO DPL-0020] Mirrored 44 instances
[INFO DPL-0021] HPWL before            3349.1 u
[INFO DPL-0022] HPWL after             3348.0 u
[INFO DPL-0023] HPWL delta               -0.0 %
[INFO FLW-0012] Placement violations .
Report metrics stage 3, detailed place...

==========================================================================
detailed place report_design_area
--------------------------------------------------------------------------
Design area 650 u^2 70% utilization.
Elapsed time: 0:00.73[h:]min:sec. CPU time: user 0.65 sys 0.08 (99%). Peak memory: 122236KB.
cp ./results/nangate45/gcd/gcd_run_3_5_1/3_5_place_dp.odb ./results/nangate45/gcd/gcd_run_3_5_1/3_place.odb
cp ./results/nangate45/gcd/gcd_run_3_5_1/2_floorplan.sdc ./results/nangate45/gcd/gcd_run_3_5_1/3_place.sdc
