1. Executing Verilog-2005 frontend: /work/CSE291/project/trial/CSE291_PROJECT/new_workspace/flow/designs/src/swerv/swerv_wrapper.sv2v.v
2. Executing Verilog-2005 frontend: /work/CSE291/project/trial/CSE291_PROJECT/new_workspace/flow/designs/nangate45/swerv/macros.v
3. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/NangateOpenCellLibrary_typical.lib
4. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/fakeram45_2048x39.lib
5. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/fakeram45_256x34.lib
6. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/fakeram45_64x21.lib
7. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/NangateOpenCellLibrary_typical.lib
8. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/fakeram45_2048x39.lib
9. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/fakeram45_256x34.lib
10. Executing Liberty frontend: ./objects/nangate45/swerv_wrapper/swerv_wrapper_test/lib/fakeram45_64x21.lib
11. Executing Verilog-2005 frontend: /work/CSE291/project/trial/CSE291_PROJECT/new_workspace/flow/platforms/nangate45/cells_clkgate.v
Using ABC speed script.
Extracting clock period from SDC file: ./results/nangate45/swerv_wrapper/swerv_wrapper_test/clock_period.txt
Setting clock period to 2.0
12. Executing HIERARCHY pass (managing design hierarchy).
13. Executing AST frontend in derive mode using pre-parsed AST for module `\swerv_wrapper'.
13.1. Analyzing design hierarchy..
13.2. Executing AST frontend in derive mode using pre-parsed AST for module `\mem'.
13.3. Executing AST frontend in derive mode using pre-parsed AST for module `\swerv'.
13.4. Analyzing design hierarchy..
13.5. Executing AST frontend in derive mode using pre-parsed AST for module `\dma_ctrl'.
13.6. Executing AST frontend in derive mode using pre-parsed AST for module `\pic_ctrl'.
13.7. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu'.
13.8. Executing AST frontend in derive mode using pre-parsed AST for module `\exu'.
13.9. Executing AST frontend in derive mode using pre-parsed AST for module `\dec'.
13.10. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu'.
13.11. Executing AST frontend in derive mode using pre-parsed AST for module `\dmi_wrapper'.
13.12. Executing AST frontend in derive mode using pre-parsed AST for module `\dbg'.
13.13. Executing AST frontend in derive mode using pre-parsed AST for module `\rvclkhdr'.
13.14. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu_ic_mem'.
13.15. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_dccm_mem'.
13.16. Analyzing design hierarchy..
13.17. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH3'.
13.18. Executing AST frontend in derive mode using pre-parsed AST for module `\ram_2048x39'.
13.19. Executing AST frontend in derive mode using pre-parsed AST for module `\IC_DATA_ICACHE_TAG_HIGH12_ICACHE_TAG_LOW6_ICACHE_IC_DEPTH8'.
13.20. Executing AST frontend in derive mode using pre-parsed AST for module `\IC_TAG_ICACHE_TAG_HIGH12_ICACHE_TAG_LOW6_ICACHE_TAG_DEPTH64'.
13.21. Executing AST frontend in derive mode using pre-parsed AST for module `\clockhdr'.
13.22. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH64'.
13.23. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH2'.
13.24. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH1'.
13.25. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH4'.
13.26. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH32'.
13.27. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH32'.
13.28. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH3'.
13.29. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffsc_WIDTH1'.
13.30. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH1'.
13.31. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH5'.
13.32. Executing AST frontend in derive mode using pre-parsed AST for module `\dmi_jtag_to_core_sync'.
13.33. Executing AST frontend in derive mode using pre-parsed AST for module `\rvjtag_tap'.
13.34. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu_mem_ctl'.
13.35. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu_aln_ctl'.
13.36. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu_bp_ctl'.
13.37. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu_ifc_ctl'.
13.38. Executing AST frontend in derive mode using pre-parsed AST for module `\dec_trigger'.
13.39. Executing AST frontend in derive mode using pre-parsed AST for module `\dec_gpr_ctl_GPR_BANKS1_GPR_BANKS_LOG21'.
13.40. Executing AST frontend in derive mode using pre-parsed AST for module `\dec_tlu_ctl'.
13.41. Executing AST frontend in derive mode using pre-parsed AST for module `\dec_decode_ctl'.
13.42. Executing AST frontend in derive mode using pre-parsed AST for module `\dec_ib_ctl'.
13.43. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH31'.
13.44. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH2'.
13.45. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH63'.
13.46. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH33'.
13.47. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH74'.
13.48. Executing AST frontend in derive mode using pre-parsed AST for module `\exu_alu_ctl'.
13.49. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH5'.
13.50. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH76'.
13.51. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH20'.
13.52. Executing AST frontend in derive mode using pre-parsed AST for module `\exu_div_ctl'.
13.53. Executing AST frontend in derive mode using pre-parsed AST for module `\exu_mul_ctl'.
13.54. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_bus_intf'.
13.55. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_clkdomain'.
13.56. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_trigger'.
13.57. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_ecc'.
13.58. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_stbuf'.
13.59. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_dccm_ctl'.
13.60. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_lsc_ctl'.
13.61. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH4'.
13.62. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH8'.
13.63. Executing AST frontend in derive mode using pre-parsed AST for module `\cmp_and_mux_ID_BITS8_INTPRIORITY_BITS4'.
13.64. Executing AST frontend in derive mode using pre-parsed AST for module `\configurable_gw'.
13.65. Executing AST frontend in derive mode using pre-parsed AST for module `\rvsyncss_WIDTH8'.
13.66. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH32'.
13.67. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH8'.
13.68. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH64'.
13.69. Executing AST frontend in derive mode using pre-parsed AST for module `\rvrangecheck_f00c0000_32'.
13.70. Executing AST frontend in derive mode using pre-parsed AST for module `\rvrangecheck_f0040000_64'.
13.71. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffsc_WIDTH2'.
13.72. Analyzing design hierarchy..
13.73. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH64'.
13.74. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH18'.
13.75. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_addrcheck'.
13.76. Executing AST frontend in derive mode using pre-parsed AST for module `\rvlsadder'.
13.77. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH12'.
13.78. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH7'.
13.79. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH16'.
13.80. Executing AST frontend in derive mode using pre-parsed AST for module `\rvecc_encode'.
13.81. Executing AST frontend in derive mode using pre-parsed AST for module `\rvecc_decode'.
13.82. Executing AST frontend in derive mode using pre-parsed AST for module `\rvmaskandmatch'.
13.83. Executing AST frontend in derive mode using pre-parsed AST for module `\lsu_bus_buffer'.
13.84. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH33'.
13.85. Executing AST frontend in derive mode using pre-parsed AST for module `\rvtwoscomp_WIDTH32'.
13.86. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH6'.
13.87. Executing AST frontend in derive mode using pre-parsed AST for module `\rvbradder'.
13.88. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH12'.
13.89. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH74'.
13.90. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH20'.
13.91. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH76'.
13.92. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH63'.
13.93. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH31'.
13.94. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH68'.
13.95. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH37'.
13.96. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH67'.
13.97. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH9'.
13.98. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH26'.
13.99. Executing AST frontend in derive mode using pre-parsed AST for module `\dec_dec_ctl'.
13.100. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH10'.
13.101. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH6'.
13.102. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH17'.
13.103. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH14'.
13.104. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH8'.
13.105. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH22'.
13.106. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH15'.
13.107. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH34'.
13.108. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH38'.
13.109. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH22'.
13.110. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH11'.
13.111. Executing AST frontend in derive mode using pre-parsed AST for module `\rvsyncss_WIDTH6'.
13.112. Executing AST frontend in derive mode using pre-parsed AST for module `\rvbtb_ghr_hash'.
13.113. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH9'.
13.114. Executing AST frontend in derive mode using pre-parsed AST for module `\rvbtb_tag_hash'.
13.115. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH28'.
13.116. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH13'.
13.117. Executing AST frontend in derive mode using pre-parsed AST for module `\rvbtb_addr_hash'.
13.118. Executing AST frontend in derive mode using pre-parsed AST for module `\ifu_compress_ctl'.
13.119. Executing AST frontend in derive mode using pre-parsed AST for module `\rveven_paritycheck'.
13.120. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH128'.
13.121. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH48'.
13.122. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffe_WIDTH53'.
13.123. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdffs_WIDTH11'.
13.124. Executing AST frontend in derive mode using pre-parsed AST for module `\rveven_paritygen_WIDTH16'.
13.125. Executing AST frontend in derive mode using pre-parsed AST for module `\OPENROAD_CLKGATE'.
13.126. Executing AST frontend in derive mode using pre-parsed AST for module `\rveven_paritycheck_WIDTH20'.
13.127. Executing AST frontend in derive mode using pre-parsed AST for module `\ram_64x21'.
13.128. Executing AST frontend in derive mode using pre-parsed AST for module `\rveven_paritygen_WIDTH20'.
13.129. Executing AST frontend in derive mode using pre-parsed AST for module `\ram_256x34'.
13.130. Analyzing design hierarchy..
13.131. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH53'.
13.132. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH48'.
13.133. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH128'.
13.134. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH16'.
13.135. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH28'.
13.136. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH26'.
13.137. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH14'.
13.138. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH17'.
13.139. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH37'.
13.140. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH67'.
13.141. Executing AST frontend in derive mode using pre-parsed AST for module `\rvdff_WIDTH68'.
13.142. Analyzing design hierarchy..
13.143. Analyzing design hierarchy..
14. Executing OPT_CLEAN pass (remove unused cells and wires).
Warning: Ignoring module rvdff_WIDTH68 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH67 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH37 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH17 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH14 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH26 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH28 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH16 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH128 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH48 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH53 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH13 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH9 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH11 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH22 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH38 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH34 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH15 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH10 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH31 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH63 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH76 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH20 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH74 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH6 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH33 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH7 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH12 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH18 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH32 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH8 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH4 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH5 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvjtag_tap because it contains processes (run 'proc' command first).
Warning: Ignoring module dmi_jtag_to_core_sync because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH1 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH3 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH2 because it contains processes (run 'proc' command first).
Warning: Ignoring module rvdff_WIDTH64 because it contains processes (run 'proc' command first).
15. Executing RTLIL backend.
Warnings: 39 unique messages, 39 total
End of script. Logfile hash: bfd4200c15, CPU: user 10.50s system 1.04s, MEM: 1186.82 MB peak
Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)
Time spent: 54% 1x hierarchy (6 sec), 19% 1x opt_clean (2 sec), ...
Elapsed time: 0:12.27[h:]min:sec. CPU time: user 11.02 sys 1.06 (98%). Peak memory: 1215308KB.
