/work/project/flow/util/preprocessLib.py -i /work/project/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib
Opening file for replace: /work/project/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib
Commented 0 lines containing "original_pin"
Replaced malformed functions 0
Writing replaced file: objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib
mkdir -p results/nangate45/gcd/gcd_run_5_4/
echo .41 > results/nangate45/gcd/gcd_run_5_4/clock_period.txt
mkdir -p ./results/nangate45/gcd/gcd_run_5_4 ./logs/nangate45/gcd/gcd_run_5_4 ./reports/nangate45/gcd/gcd_run_5_4 ./objects/nangate45/gcd/gcd_run_5_4
(env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /opt/oss-cad-suite/bin/yosys -v 3 -c /work/project/flow/scripts/synth_canonicalize.tcl) 2>&1 | tee /work/project/flow/logs/nangate45/gcd/gcd_run_5_4/1_1_yosys_canonicalize.log
1. Executing Verilog-2005 frontend: /work/project/flow/designs/src/gcd/gcd.v
2. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib
3. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib
4. Executing Verilog-2005 frontend: /work/project/flow/platforms/nangate45/cells_clkgate.v
Using ABC area script.
Extracting clock period from SDC file: ./results/nangate45/gcd/gcd_run_5_4/clock_period.txt
Setting clock period to .41
5. Executing HIERARCHY pass (managing design hierarchy).
6. Executing AST frontend in derive mode using pre-parsed AST for module `\gcd'.
6.1. Analyzing design hierarchy..
6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\GcdUnitDpathRTL_0x4d0fc71ead8d3d9e'.
6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\GcdUnitCtrlRTL_0x4d0fc71ead8d3d9e'.
6.4. Analyzing design hierarchy..
6.5. Executing AST frontend in derive mode using pre-parsed AST for module `\RegRst_0x9f365fdf6c8998a'.
6.6. Executing AST frontend in derive mode using pre-parsed AST for module `\RegEn_0x68db79c4ec1d6e5b'.
6.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Subtractor_0x422b1f52edd46a85'.
6.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux_0xdd6473406d1a99a'.
6.9. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux_0x683fa1a418b072c9'.
6.10. Executing AST frontend in derive mode using pre-parsed AST for module `\ZeroComparator_0x422b1f52edd46a85'.
6.11. Executing AST frontend in derive mode using pre-parsed AST for module `\LtComparator_0x422b1f52edd46a85'.
6.12. Analyzing design hierarchy..
6.13. Analyzing design hierarchy..
7. Executing OPT_CLEAN pass (remove unused cells and wires).
Warning: Ignoring module ZeroComparator_0x422b1f52edd46a85 because it contains processes (run 'proc' command first).
Warning: Ignoring module Mux_0x683fa1a418b072c9 because it contains processes (run 'proc' command first).
Warning: Ignoring module Mux_0xdd6473406d1a99a because it contains processes (run 'proc' command first).
Warning: Ignoring module Subtractor_0x422b1f52edd46a85 because it contains processes (run 'proc' command first).
Warning: Ignoring module RegEn_0x68db79c4ec1d6e5b because it contains processes (run 'proc' command first).
Warning: Ignoring module RegRst_0x9f365fdf6c8998a because it contains processes (run 'proc' command first).
Warning: Ignoring module GcdUnitCtrlRTL_0x4d0fc71ead8d3d9e because it contains processes (run 'proc' command first).
Warning: Ignoring module LtComparator_0x422b1f52edd46a85 because it contains processes (run 'proc' command first).
8. Executing RTLIL backend.
Warnings: 8 unique messages, 8 total
End of script. Logfile hash: 7aba365406, CPU: user 0.67s system 0.06s, MEM: 30.65 MB peak
Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)
Time spent: 84% 4x read_liberty (0 sec), 7% 4x read_verilog (0 sec), ...
Elapsed time: 0:01.03[h:]min:sec. CPU time: user 0.87 sys 0.08 (92%). Peak memory: 33548KB.
mkdir -p ./results/nangate45/gcd/gcd_run_5_4 ./logs/nangate45/gcd/gcd_run_5_4 ./reports/nangate45/gcd/gcd_run_5_4 ./objects/nangate45/gcd/gcd_run_5_4
(env time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' /opt/oss-cad-suite/bin/yosys -v 3 -c /work/project/flow/scripts/synth.tcl) 2>&1 | tee /work/project/flow/logs/nangate45/gcd/gcd_run_5_4/1_1_yosys.log
1. Executing RTLIL frontend.
2. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib
3. Executing Liberty frontend: ./objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib
4. Executing Verilog-2005 frontend: /work/project/flow/platforms/nangate45/cells_clkgate.v
Using ABC area script.
Extracting clock period from SDC file: ./results/nangate45/gcd/gcd_run_5_4/clock_period.txt
Setting clock period to .41
5. Executing HIERARCHY pass (managing design hierarchy).
5.1. Analyzing design hierarchy..
5.2. Analyzing design hierarchy..
6. Executing SYNTH pass.
6.1. Executing HIERARCHY pass (managing design hierarchy).
6.1.1. Analyzing design hierarchy..
6.1.2. Analyzing design hierarchy..
6.2. Executing PROC pass (convert processes to netlists).
6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
6.2.4. Executing PROC_INIT pass (extract init attributes).
6.2.5. Executing PROC_ARST pass (detect async resets in processes).
6.2.6. Executing PROC_ROM pass (convert switches to ROMs).
6.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
6.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
6.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
6.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
6.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
6.2.12. Executing OPT_EXPR pass (perform const folding).
6.3. Executing FLATTEN pass (flatten design).
6.4. Executing OPT_EXPR pass (perform const folding).
6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
6.6. Executing CHECK pass (checking for obvious problems).
6.7. Executing OPT pass (performing simple optimizations).
6.7.1. Executing OPT_EXPR pass (perform const folding).
6.7.2. Executing OPT_MERGE pass (detect identical cells).
6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.7.5. Executing OPT_MERGE pass (detect identical cells).
6.7.6. Executing OPT_DFF pass (perform DFF optimizations).
6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.7.8. Executing OPT_EXPR pass (perform const folding).
6.7.9. Rerunning OPT passes. (Maybe there is more to do..)
6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.7.12. Executing OPT_MERGE pass (detect identical cells).
6.7.13. Executing OPT_DFF pass (perform DFF optimizations).
6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.7.15. Executing OPT_EXPR pass (perform const folding).
6.7.16. Finished OPT passes. (There is nothing left to do.)
6.8. Executing FSM pass (extract and optimize FSM).
6.8.1. Executing FSM_DETECT pass (finding FSMs in design).
6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
6.9. Executing OPT pass (performing simple optimizations).
6.9.1. Executing OPT_EXPR pass (perform const folding).
6.9.2. Executing OPT_MERGE pass (detect identical cells).
6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.9.5. Executing OPT_MERGE pass (detect identical cells).
6.9.6. Executing OPT_DFF pass (perform DFF optimizations).
6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.9.8. Executing OPT_EXPR pass (perform const folding).
6.9.9. Rerunning OPT passes. (Maybe there is more to do..)
6.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.9.12. Executing OPT_MERGE pass (detect identical cells).
6.9.13. Executing OPT_DFF pass (perform DFF optimizations).
6.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.9.15. Executing OPT_EXPR pass (perform const folding).
6.9.16. Finished OPT passes. (There is nothing left to do.)
6.10. Executing WREDUCE pass (reducing word size of cells).
6.11. Executing PEEPOPT pass (run peephole optimizers).
6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
6.13. Executing ALUMACC pass (create $alu and $macc cells).
6.14. Executing SHARE pass (SAT-based resource sharing).
6.15. Executing OPT pass (performing simple optimizations).
6.15.1. Executing OPT_EXPR pass (perform const folding).
6.15.2. Executing OPT_MERGE pass (detect identical cells).
6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.15.5. Executing OPT_MERGE pass (detect identical cells).
6.15.6. Executing OPT_DFF pass (perform DFF optimizations).
6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15.8. Executing OPT_EXPR pass (perform const folding).
6.15.9. Rerunning OPT passes. (Maybe there is more to do..)
6.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.15.12. Executing OPT_MERGE pass (detect identical cells).
6.15.13. Executing OPT_DFF pass (perform DFF optimizations).
6.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15.15. Executing OPT_EXPR pass (perform const folding).
6.15.16. Finished OPT passes. (There is nothing left to do.)
6.16. Executing MEMORY pass.
6.16.1. Executing OPT_MEM pass (optimize memories).
6.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
6.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
6.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
6.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
6.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
6.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
6.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
6.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
6.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).
6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
7. Executing SYNTH pass.
7.1. Executing OPT pass (performing simple optimizations).
7.1.1. Executing OPT_EXPR pass (perform const folding).
7.1.2. Executing OPT_MERGE pass (detect identical cells).
7.1.3. Executing OPT_DFF pass (perform DFF optimizations).
7.1.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.1.5. Finished fast OPT passes.
7.2. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
7.3. Executing OPT pass (performing simple optimizations).
7.3.1. Executing OPT_EXPR pass (perform const folding).
7.3.2. Executing OPT_MERGE pass (detect identical cells).
7.3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
7.3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
7.3.5. Executing OPT_MERGE pass (detect identical cells).
7.3.6. Executing OPT_SHARE pass.
7.3.7. Executing OPT_DFF pass (perform DFF optimizations).
7.3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
7.3.9. Executing OPT_EXPR pass (perform const folding).
7.3.10. Finished OPT passes. (There is nothing left to do.)
7.4. Executing TECHMAP pass (map to technology primitives).
7.4.1. Executing Verilog-2005 frontend: /opt/oss-cad-suite/lib/../share/yosys/techmap.v
7.4.2. Executing Verilog-2005 frontend: /work/project/flow/platforms/common/lcu_kogge_stone.v
7.4.3. Continuing TECHMAP pass.
7.5. Executing OPT pass (performing simple optimizations).
7.5.1. Executing OPT_EXPR pass (perform const folding).
7.5.2. Executing OPT_MERGE pass (detect identical cells).
7.5.3. Executing OPT_DFF pass (perform DFF optimizations).
7.5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.5.5. Finished fast OPT passes.
7.6. Executing ABC pass (technology mapping using ABC).
7.6.1. Extracting gate netlist of module `\gcd' to `<abc-temp-dir>/input.blif'..
7.7. Executing OPT pass (performing simple optimizations).
7.7.1. Executing OPT_EXPR pass (perform const folding).
7.7.2. Executing OPT_MERGE pass (detect identical cells).
7.7.3. Executing OPT_DFF pass (perform DFF optimizations).
7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.7.5. Finished fast OPT passes.
7.8. Executing HIERARCHY pass (managing design hierarchy).
7.8.1. Analyzing design hierarchy..
7.8.2. Analyzing design hierarchy..
7.9. Printing statistics.
7.10. Executing CHECK pass (checking for obvious problems).
8. Executing OPT pass (performing simple optimizations).
8.1. Executing OPT_EXPR pass (perform const folding).
8.2. Executing OPT_MERGE pass (detect identical cells).
8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
8.5. Executing OPT_MERGE pass (detect identical cells).
8.6. Executing OPT_DFF pass (perform DFF optimizations).
8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
8.8. Executing OPT_EXPR pass (perform const folding).
8.9. Rerunning OPT passes. (Maybe there is more to do..)
8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
8.12. Executing OPT_MERGE pass (detect identical cells).
8.13. Executing OPT_DFF pass (perform DFF optimizations).
8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
8.15. Executing OPT_EXPR pass (perform const folding).
8.16. Finished OPT passes. (There is nothing left to do.)
9. Executing TECHMAP pass (map to technology primitives).
9.1. Executing Verilog-2005 frontend: /work/project/flow/platforms/nangate45/cells_latch.v
9.2. Continuing TECHMAP pass.
10. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
10.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
11. Executing OPT pass (performing simple optimizations).
11.1. Executing OPT_EXPR pass (perform const folding).
11.2. Executing OPT_MERGE pass (detect identical cells).
11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.5. Executing OPT_MERGE pass (detect identical cells).
11.6. Executing OPT_DFF pass (perform DFF optimizations).
11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
11.8. Executing OPT_EXPR pass (perform const folding).
11.9. Rerunning OPT passes. (Maybe there is more to do..)
11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.12. Executing OPT_MERGE pass (detect identical cells).
11.13. Executing OPT_DFF pass (perform DFF optimizations).
11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.15. Executing OPT_EXPR pass (perform const folding).
11.16. Finished OPT passes. (There is nothing left to do.)
abc -script /work/project/flow/scripts/abc_area.script -liberty ./objects/nangate45/gcd/gcd_run_5_4/lib/NangateOpenCellLibrary_typical.lib -constr ./objects/nangate45/gcd/gcd_run_5_4/abc.constr -dont_use TAPCELL_X1 -dont_use FILLCELL_X1 -dont_use AOI211_X1 -dont_use OAI211_X1 -D 0.41
12. Executing ABC pass (technology mapping using ABC).
12.1. Extracting gate netlist of module `\gcd' to `<abc-temp-dir>/input.blif'..
12.1.1. Executing ABC.
12.1.2. Re-integrating ABC results.
13. Executing SETUNDEF pass (replace undef values with defined constants).
14. Executing SPLITNETS pass (splitting up multi-bit signals).
15. Executing OPT_CLEAN pass (remove unused cells and wires).
16. Executing HILOMAP pass (mapping to constant drivers).
17. Executing INSBUF pass (insert buffer cells for connected wires).
18. Executing CHECK pass (checking for obvious problems).
19. Printing statistics.
20. Executing CHECK pass (checking for obvious problems).
21. Executing Verilog backend.
21.1. Executing BMUXMAP pass.
21.2. Executing DEMUXMAP pass.
exec cp /work/project/flow/designs/nangate45/gcd/constraint.sdc ./results/nangate45/gcd/gcd_run_5_4/1_synth.sdc
End of script. Logfile hash: 310dc68f7c, CPU: user 1.58s system 0.04s, MEM: 37.39 MB peak
Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)
Time spent: 26% 2x abc (0 sec), 17% 4x read_liberty (0 sec), ...
Elapsed time: 0:02.90[h:]min:sec. CPU time: user 2.18 sys 0.17 (81%). Peak memory: 38960KB.
mkdir -p ./results/nangate45/gcd/gcd_run_5_4 ./logs/nangate45/gcd/gcd_run_5_4 ./reports/nangate45/gcd/gcd_run_5_4
cp ./results/nangate45/gcd/gcd_run_5_4/1_1_yosys.v ./results/nangate45/gcd/gcd_run_5_4/1_synth.v
OpenROAD v2.0-19576-gec1bf1a13 
Features included (+) or not (-): +GPU +GUI +Python : None
This program is licensed under the BSD-3 license. See the LICENSE file for details.
Components of this program may be licensed under more restrictive licenses which must be honored.
[INFO ORD-0030] Using 8 thread(s).
mkdir -p ./objects/nangate45/gcd/gcd_run_5_4
Running floorplan.tcl, stage 2_1_floorplan
[INFO ODB-0227] LEF file: /work/project/flow/platforms/nangate45/lef/NangateOpenCellLibrary.tech.lef, created 22 layers, 27 vias
[INFO ODB-0227] LEF file: /work/project/flow/platforms/nangate45/lef/NangateOpenCellLibrary.macro.mod.lef, created 135 library cells

==========================================================================
Floorplan check_setup
--------------------------------------------------------------------------
number instances in verilog is 503
[WARNING IFP-0028] Core area lower left (1.000, 1.000) snapped to (1.140, 1.400).
[INFO IFP-0001] Added 24 rows of 180 site FreePDK45_38x28_10R_NP_162NW_34O.
repair_timing -verbose -setup_margin 0 -repair_tns 100
[WARNING RSZ-0021] no estimated parasitics. Using wire load models.
[INFO RSZ-0098] No setup violations found
[INFO RSZ-0033] No hold violations found.
Default units for flow
 time 1ns
 capacitance 1fF
 resistance 1kohm
 voltage 1v
 current 1mA
 power 1nW
 distance 1um
Report metrics stage 2, floorplan final...

==========================================================================
floorplan final report_design_area
--------------------------------------------------------------------------
Design area 650 u^2 57% utilization.
Elapsed time: 0:01.32[h:]min:sec. CPU time: user 1.04 sys 0.11 (87%). Peak memory: 121576KB.
Running macro_place.tcl, stage 2_2_floorplan_macro
No macros found: Skipping macro_placement
Elapsed time: 0:00.90[h:]min:sec. CPU time: user 0.66 sys 0.11 (86%). Peak memory: 117792KB.
Running tapcell.tcl, stage 2_3_floorplan_tapcell
[INFO TAP-0004] Inserted 48 endcaps.
[INFO TAP-0005] Inserted 0 tapcells.
Elapsed time: 0:00.96[h:]min:sec. CPU time: user 0.72 sys 0.09 (84%). Peak memory: 118436KB.
Running pdn.tcl, stage 2_4_floorplan_pdn
[INFO PDN-0001] Inserting grid: grid
Elapsed time: 0:01.01[h:]min:sec. CPU time: user 0.73 sys 0.11 (83%). Peak memory: 121344KB.
cp ./results/nangate45/gcd/gcd_run_5_4/2_4_floorplan_pdn.odb ./results/nangate45/gcd/gcd_run_5_4/2_floorplan.odb
cp ./results/nangate45/gcd/gcd_run_5_4/2_1_floorplan.sdc ./results/nangate45/gcd/gcd_run_5_4/2_floorplan.sdc
Running global_place_skip_io.tcl, stage 3_1_place_gp_skip_io
FLOORPLAN_DEF is set. Skipping global placement without IOs
Elapsed time: 0:00.87[h:]min:sec. CPU time: user 0.67 sys 0.14 (93%). Peak memory: 116236KB.
Running io_placement.tcl, stage 3_2_place_iop
place_pins -hor_layers metal5 -ver_layers metal6
Found 0 macro blocks.
Using 2 tracks default min distance between IO pins.
[INFO PPL-0001] Number of available slots 244
[INFO PPL-0002] Number of I/O             54
[INFO PPL-0003] Number of I/O w/sink      54
[INFO PPL-0004] Number of I/O w/o sink    0
[INFO PPL-0005] Slots per section         200
[INFO PPL-0008] Successfully assigned pins to sections.
[INFO PPL-0012] I/O nets HPWL: 1390.50 um.
Elapsed time: 0:00.91[h:]min:sec. CPU time: user 0.67 sys 0.10 (85%). Peak memory: 119680KB.
Running global_place.tcl, stage 3_3_place_gp
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: (  1.140  1.400 ) ( 35.340 35.000 ) um
[INFO GPL-0006] NumInstances:               551
[INFO GPL-0007] NumPlaceInstances:          503
[INFO GPL-0008] NumFixedInstances:           48
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    574
[INFO GPL-0011] NumPins:                   1626
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 36.380 36.380 ) um
[INFO GPL-0013] CoreBBox: (  1.140  1.400 ) ( 35.340 35.000 ) um
[INFO GPL-0016] CoreArea:              1149.120 um^2
[INFO GPL-0017] NonPlaceInstsArea:       12.768 um^2
[INFO GPL-0018] PlaceInstsArea:         650.104 um^2
[INFO GPL-0019] Util:                    57.210 %
[INFO GPL-0020] StdInstsArea:           650.104 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[INFO GPL-0031] FillerInit:NumGCells:       926
[INFO GPL-0032] FillerInit:NumGNets:        574
[INFO GPL-0033] FillerInit:NumGPins:       1626
[INFO GPL-0023] TargetDensity:            1.000
[INFO GPL-0024] AvrgPlaceInstArea:        1.292 um^2
[INFO GPL-0025] IdealBinArea:             1.292 um^2
[INFO GPL-0026] IdealBinCnt:                889
[INFO GPL-0027] TotalBinArea:          1149.120 um^2
[INFO GPL-0028] BinCnt:        16     16
[INFO GPL-0029] BinSize: (  2.138  2.100 )
[INFO GPL-0030] NumBins: 256
Placement density is 0.6676778888702393, computed from PLACE_DENSITY_LB_ADDON 0.20 and lower bound 0.5720973610877991
global_placement -density 0.6676778888702393 -pad_left 0 -pad_right 0 -routability_driven -timing_driven
[INFO GPL-0002] DBU: 2000
[INFO GPL-0003] SiteSize: (  0.190  1.400 ) um
[INFO GPL-0004] CoreBBox: (  1.140  1.400 ) ( 35.340 35.000 ) um
[INFO GPL-0006] NumInstances:               551
[INFO GPL-0007] NumPlaceInstances:          503
[INFO GPL-0008] NumFixedInstances:           48
[INFO GPL-0009] NumDummyInstances:            0
[INFO GPL-0010] NumNets:                    574
[INFO GPL-0011] NumPins:                   1626
[INFO GPL-0012] DieBBox:  (  0.000  0.000 ) ( 36.380 36.380 ) um
[INFO GPL-0013] CoreBBox: (  1.140  1.400 ) ( 35.340 35.000 ) um
[INFO GPL-0016] CoreArea:              1149.120 um^2
[INFO GPL-0017] NonPlaceInstsArea:       12.768 um^2
[INFO GPL-0018] PlaceInstsArea:         650.104 um^2
[INFO GPL-0019] Util:                    57.210 %
[INFO GPL-0020] StdInstsArea:           650.104 um^2
[INFO GPL-0021] MacroInstsArea:           0.000 um^2
[InitialPlace]  Iter: 1 CG residual: 0.00000010 HPWL: 5066920
[InitialPlace]  Iter: 2 CG residual: 0.00000009 HPWL: 4081714
[InitialPlace]  Iter: 3 CG residual: 0.00000004 HPWL: 4076921
[InitialPlace]  Iter: 4 CG residual: 0.00000009 HPWL: 4084361
[InitialPlace]  Iter: 5 CG residual: 0.00000009 HPWL: 4082692
[INFO GPL-0031] FillerInit:NumGCells:       597
[INFO GPL-0032] FillerInit:NumGNets:        574
[INFO GPL-0033] FillerInit:NumGPins:       1626
[INFO GPL-0023] TargetDensity:            0.668
[INFO GPL-0024] AvrgPlaceInstArea:        1.292 um^2
[INFO GPL-0025] IdealBinArea:             1.936 um^2
[INFO GPL-0026] IdealBinCnt:                593
[INFO GPL-0027] TotalBinArea:          1149.120 um^2
[INFO GPL-0028] BinCnt:        16     16
[INFO GPL-0029] BinSize: (  2.138  2.100 )
[INFO GPL-0030] NumBins: 256
[NesterovSolve] Iter:    1 overflow: 0.961 HPWL: 1817707
[NesterovSolve] Iter:   10 overflow: 0.938 HPWL: 2054509
[NesterovSolve] Iter:   20 overflow: 0.938 HPWL: 2057169
[NesterovSolve] Iter:   30 overflow: 0.939 HPWL: 2055866
[NesterovSolve] Iter:   40 overflow: 0.939 HPWL: 2055874
[NesterovSolve] Iter:   50 overflow: 0.939 HPWL: 2056639
[NesterovSolve] Iter:   60 overflow: 0.939 HPWL: 2056307
[NesterovSolve] Iter:   70 overflow: 0.939 HPWL: 2056163
[NesterovSolve] Iter:   80 overflow: 0.939 HPWL: 2057573
[NesterovSolve] Iter:   90 overflow: 0.938 HPWL: 2059115
[NesterovSolve] Iter:  100 overflow: 0.938 HPWL: 2061896
[NesterovSolve] Iter:  110 overflow: 0.938 HPWL: 2068021
[NesterovSolve] Iter:  120 overflow: 0.938 HPWL: 2082797
[NesterovSolve] Iter:  130 overflow: 0.937 HPWL: 2113867
[NesterovSolve] Iter:  140 overflow: 0.937 HPWL: 2172370
[NesterovSolve] Iter:  150 overflow: 0.935 HPWL: 2265648
[NesterovSolve] Iter:  160 overflow: 0.923 HPWL: 2401760
[NesterovSolve] Iter:  170 overflow: 0.914 HPWL: 2571500
[NesterovSolve] Iter:  180 overflow: 0.897 HPWL: 2809868
[NesterovSolve] Iter:  190 overflow: 0.876 HPWL: 3071751
[NesterovSolve] Iter:  200 overflow: 0.847 HPWL: 3410608
[NesterovSolve] Iter:  210 overflow: 0.812 HPWL: 3722023
[NesterovSolve] Iter:  220 overflow: 0.781 HPWL: 4046102
[INFO GPL-0100] Timing-driven iteration 1/5, virtual: true.
[INFO GPL-0101]    Iter: 220, overflow: 0.781, keep rsz at: 0.3, HPWL: 4046102
Iteration |   Area    | Resized | Buffers | Nets repaired | Remaining
---------------------------------------------------------------------
        0 |     +0.0% |       0 |       0 |             0 |       574
    final |     -8.3% |     107 |       0 |             0 |         0
---------------------------------------------------------------------
[INFO RSZ-0039] Resized 107 instances.
[INFO GPL-0106] Timing-driven: worst slack -1.04e-11
[INFO GPL-0103] Timing-driven: weighted 56 nets.
[NesterovSolve] Iter:  230 overflow: 0.750 HPWL: 4365192
[NesterovSolve] Iter:  240 overflow: 0.710 HPWL: 4718012
[NesterovSolve] Iter:  250 overflow: 0.668 HPWL: 5050335
[INFO GPL-0100] Timing-driven iteration 2/5, virtual: true.
[INFO GPL-0101]    Iter: 257, overflow: 0.633, keep rsz at: 0.3, HPWL: 5277804
Iteration |   Area    | Resized | Buffers | Nets repaired | Remaining
---------------------------------------------------------------------
        0 |     +0.0% |       0 |       0 |             0 |       574
    final |     -8.1% |     106 |       0 |             0 |         0
---------------------------------------------------------------------
[INFO RSZ-0039] Resized 106 instances.
[INFO GPL-0106] Timing-driven: worst slack -1.17e-11
[INFO GPL-0103] Timing-driven: weighted 56 nets.
[NesterovSolve] Iter:  260 overflow: 0.619 HPWL: 5385386
[INFO GPL-0088] Routability snapshot saved at iter = 264
[NesterovSolve] Iter:  270 overflow: 0.569 HPWL: 5663202
[NesterovSolve] Iter:  280 overflow: 0.519 HPWL: 5890147
[NesterovSolve] Iter:  290 overflow: 0.463 HPWL: 6079489
[NesterovSolve] Iter:  300 overflow: 0.408 HPWL: 6230743
[NesterovSolve] Iter:  310 overflow: 0.343 HPWL: 6344011
[INFO GPL-0075] Routability iteration: 1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              